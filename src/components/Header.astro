---

---

<header
  class="sticky top-0 z-50 bg-white/65 backdrop-blur-3xl border-b border-gray-200 py-2.5"
>
  <div class="site-container flex justify-between items-center">
    <a
      href="/"
      class="text-sm font-bold tracking-tighter text-gray-900 flex items-center hover:bg-black hover:text-white focus-visible:bg-white focus-visible:text-black focus-visible:border-black focus-visible:border focus-visible:outline-none p-1 transition-colors"
      aria-label="Julian Pineda - Home"
    >
      <span>Julian Pineda</span>
    </a>

    <div class="flex items-center gap-4">
      <!-- Mobile menu button -->
      <button
        id="menu-toggle"
        class="md:hidden flex items-center p-2 text-gray-900"
        aria-label="Toggle menu"
        aria-expanded="false"
        aria-controls="mobile-nav"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="menu-icon"
          aria-hidden="true"
          role="img"
        >
          <line x1="3" y1="12" x2="21" y2="12"></line>
          <line x1="3" y1="6" x2="21" y2="6"></line>
          <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
      </button>

      <!-- Desktop navigation -->
      <nav
        id="desktop-nav"
        class="hidden md:flex items-center gap-8"
        aria-label="Main navigation"
      >
        <a
          href="#about"
          class="nav-link text-[0.88rem] text-[#262626] hover:text-[#262626] relative pb-[2px] link-hover border-none"
          >About</a
        >
        <a
          href="#experience"
          class="nav-link text-[0.88rem] text-[#262626] hover:text-[#262626] relative pb-[2px] link-hover border-none"
          >Experience</a
        >
        <a
          href="#projects"
          class="nav-link text-[0.88rem] text-[#262626] hover:text-[#262626] relative pb-[2px] link-hover border-none"
          >Projects</a
        >
        <a
          href="#services"
          class="nav-link text-[0.88rem] text-[#262626] hover:text-[#262626] relative pb-[2px] link-hover border-none"
          >Services</a
        >
        <div class="relative flex items-center">
          <button
            id="contact-dropdown-toggle"
            class="nav-link text-[0.88rem] text-[#262626] hover:text-[#262626] relative pb-[2px] link-hover border-0 bg-transparent appearance-none"
            style="line-height: 1; padding-bottom: 2px; margin-bottom: 0;"
            aria-expanded="false"
            aria-controls="contact-dropdown">Contact</button
          >
          <!-- Contact dropdown menu -->
          <div
            id="contact-dropdown"
            class="hidden absolute top-full right-0 w-auto bg-white p-2.5 border border-black"
            role="menu"
            aria-labelledby="contact-dropdown-toggle"
          >
            <div class="flex items-center py-1.5 px-2 border-b border-black">
              <span class="font-bold mr-4 text-[0.7rem]" aria-hidden="true"
                >@</span
              >
              <a
                href="mailto:julian@julianpineda.com"
                class="font-bold text-[0.7rem] text-[#262626] contact-link"
                role="menuitem">julian@julianpineda.com</a
              >
            </div>
            <div
              class="flex items-center justify-between py-1.5 px-2 border-b border-black"
            >
              <span class="font-bold mr-4 text-[0.7rem]" aria-hidden="true"
                >L</span
              >
              <a
                href="https://linkedin.com/in/julianpinedayyz"
                target="_blank"
                rel="noopener noreferrer"
                class="font-bold text-[0.7rem] text-[#262626] contact-link flex items-center"
                role="menuitem"
                >LinkedIn <span class="ml-1" aria-hidden="true">â†—</span><span
                  class="sr-only">(opens in a new tab)</span
                ></a
              >
            </div>
          </div>
        </div>
        <!-- <a
          href="/Julian Pineda - 5v4.pdf"
          target="_blank"
          class="resume-btn px-4 py-2 text-xs font-medium text-black bg-[#F4A100] hover:bg-[#e09100] rounded-[0px] transition-colors focus:outline-none focus:border focus:border-black"
          >Resume</a
        > -->
      </nav>
    </div>
  </div>

  <!-- Mobile navigation -->
  <div
    id="mobile-nav"
    class="fixed top-0 left-0 w-full h-screen bg-black hidden z-40 pt-20 transition-transform duration-[800ms] ease-in-out translate-x-0"
    aria-label="Mobile navigation"
    role="dialog"
    aria-modal="true"
    inert
    tabindex="-1"
  >
    <button
      id="close-menu-btn"
      class="absolute text-white p-2 z-50"
      style="top: 0.525rem; right: 1.9rem;"
      aria-label="Close menu"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="28"
        height="28"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        aria-hidden="true"
        role="img"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <nav class="site-container flex flex-col items-start gap-6 h-full">
      <a
        href="#about"
        class="nav-link text-5xl tracking-[-0.25rem] font-bold text-gray-300 hover:text-gray-300 relative pb-[2px] link-hover-mobile transition-transform duration-200 ease-in-out translate-x-0"
        >About</a
      >
      <a
        href="#experience"
        class="nav-link text-5xl tracking-[-0.25rem] font-bold text-gray-300 hover:text-gray-300 relative pb-[2px] link-hover-mobile transition-transform duration-200 ease-in-out translate-x-0"
        >Experience</a
      >
      <a
        href="#projects"
        class="nav-link text-5xl tracking-[-0.25rem] font-bold text-gray-300 hover:text-gray-300 relative pb-[2px] link-hover-mobile transition-transform duration-200 ease-in-out translate-x-0"
        >Projects</a
      >
      <a
        href="#services"
        class="nav-link text-5xl tracking-[-0.25rem] font-bold text-gray-300 hover:text-gray-300 relative pb-[2px] link-hover-mobile transition-transform duration-200 ease-in-out translate-x-0"
        >Services</a
      >
      <a
        href="#contact"
        class="nav-link text-5xl tracking-[-0.25rem] font-bold text-gray-300 hover:text-gray-300 relative pb-[2px] link-hover-mobile transition-transform duration-200 ease-in-out translate-x-0"
        >Contact</a
      >
      <!-- Resume button commented out -->
    </nav>
  </div>
</header>

<style>
  /* Base link hover styles */
  .link-hover {
    position: relative;
    display: inline-block;
  }

  /* Underline styling */
  .link-hover::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: #000000;
    transition: width 0.3s ease-in-out;
  }

  /* Ensure all navigation links have the same vertical alignment */
  .nav-link {
    vertical-align: baseline;
    display: inline-block;
    line-height: 1;
    border: none;
    background: transparent;
    position: relative;
  }

  /* Special case for contact dropdown */
  #contact-dropdown-toggle.link-hover::after {
    width: 0;
    height: 2px;
    left: 0;
    right: auto;
    bottom: 0;
  }

  #contact-dropdown-toggle.link-hover:hover::after {
    width: 100%;
  }

  #contact-dropdown-toggle {
    background: transparent !important;
    border: none !important;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
  }

  /* Expand underline on hover */
  .link-hover:hover::after {
    width: 100%;
  }

  /* Active link styling */
  .active-link::after {
    width: 100%;
  }

  /* New simple focus style for keyboard navigation */
  .nav-link:focus {
    outline: 2px solid black;
    outline-offset: 2px;
  }

  /* Resume button styles */
  .resume-btn {
    transition: background-color 0.3s ease;
  }

  .resume-btn:hover {
    color: #111827 !important;
  }

  /* Contact dropdown links */
  .contact-link {
    text-decoration: none;
  }

  .contact-link:hover {
    color: #262626 !important;
  }

  /* Add focus style for contact links */
  .contact-link:focus {
    outline: 2px solid black;
    outline-offset: 2px;
  }

  /* Mobile link hover */
  .link-hover-mobile {
    position: relative;
    display: inline-block;
  }

  .link-hover-mobile::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: #ffffff; /* White underline */
    transition: width 0.3s ease-in-out;
  }

  .link-hover-mobile:hover::after {
    width: 100%;
  }

  .active-link.link-hover-mobile::after {
    /* Ensure active link underline is visible */
    width: 100%;
  }

  /* Mobile focus styles */
  .link-hover-mobile:focus {
    outline: 2px solid white;
    outline-offset: 2px;
  }
</style>

<script>
  const menuToggle = document.getElementById('menu-toggle');
  const mobileNav = document.getElementById('mobile-nav');
  const contactDropdownToggle = document.getElementById(
    'contact-dropdown-toggle',
  );
  const contactDropdown = document.getElementById('contact-dropdown');
  const closeMenuBtn = document.getElementById('close-menu-btn');
  const mobileNavLinks = document.querySelectorAll('#mobile-nav .nav-link');

  // Mobile Menu focus trap functionality
  let previouslyFocusedElement = null;

  // Get all focusable elements in the mobile menu
  const getFocusableElements = () => {
    return Array.from(
      mobileNav.querySelectorAll(
        'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])',
      ),
    ).filter((el) => !el.hasAttribute('disabled') && el.offsetParent !== null);
  };

  // Handle tab key press to trap focus
  const handleTabKeyInMobileNav = (e) => {
    if (mobileNav.classList.contains('hidden')) return;

    // Get all focusable elements
    const focusableElements = getFocusableElements();

    if (focusableElements.length === 0) return;

    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];

    // If Shift+Tab on first element, move to last element
    if (
      e.key === 'Tab' &&
      e.shiftKey &&
      document.activeElement === firstElement
    ) {
      e.preventDefault();
      lastElement.focus();
    }
    // If Tab on last element, cycle to first element
    else if (
      e.key === 'Tab' &&
      !e.shiftKey &&
      document.activeElement === lastElement
    ) {
      e.preventDefault();
      firstElement.focus();
    }
  };

  // Menu toggle (Open)
  if (menuToggle && mobileNav) {
    menuToggle.addEventListener('click', () => {
      const expanded = menuToggle.getAttribute('aria-expanded') === 'true';
      menuToggle.setAttribute('aria-expanded', !expanded);
      mobileNav.classList.toggle('hidden');

      // If opening the menu, trap focus inside
      if (!expanded) {
        // Store the currently focused element to restore focus later
        previouslyFocusedElement = document.activeElement;

        // Remove inert attribute when opening
        mobileNav.removeAttribute('inert');
        mobileNav.removeAttribute('tabindex');

        // Set focus to the close button
        setTimeout(() => {
          if (closeMenuBtn) {
            closeMenuBtn.focus();
          }
        }, 100);

        // Add the keydown event listener for focus trapping
        document.addEventListener('keydown', handleTabKeyInMobileNav);
      } else {
        // Remove the keydown event listener when menu is closed
        document.removeEventListener('keydown', handleTabKeyInMobileNav);

        // Add inert attribute when closing
        mobileNav.setAttribute('inert', '');
        mobileNav.setAttribute('tabindex', '-1');
      }
    });
  }

  // Close menu button
  if (closeMenuBtn && mobileNav && menuToggle) {
    closeMenuBtn.addEventListener('click', () => {
      // Reset styles immediately if closed manually
      mobileNavLinks.forEach((link) => {
        link.classList.remove('-translate-x-[300px]');
      });
      mobileNav.classList.remove('-translate-x-[500px]');
      mobileNav.classList.add('hidden');
      menuToggle.setAttribute('aria-expanded', 'false');

      // Remove focus trap when closing
      document.removeEventListener('keydown', handleTabKeyInMobileNav);

      // Add inert attribute when closing
      mobileNav.setAttribute('inert', '');
      mobileNav.setAttribute('tabindex', '-1');

      // Return focus to the menu toggle button
      if (previouslyFocusedElement) {
        previouslyFocusedElement.focus();
      } else {
        menuToggle.focus();
      }
    });
  }

  // Close menu when a nav link is clicked, with a precise sequential animation (Slide Left)
  if (mobileNavLinks && mobileNav && menuToggle) {
    // Order links from top to bottom as they appear visually
    const orderedLinks = [
      document.querySelector('#mobile-nav a[href="#about"]'),
      document.querySelector('#mobile-nav a[href="#experience"]'),
      document.querySelector('#mobile-nav a[href="#projects"]'),
      document.querySelector('#mobile-nav a[href="#services"]'),
      document.querySelector('#mobile-nav a[href="#contact"]'),
    ].filter(Boolean); // Filter out null if any link is missing

    mobileNavLinks.forEach((clickedLink) => {
      clickedLink.addEventListener('click', (e) => {
        e.preventDefault(); // Prevent instant jump

        const targetId = clickedLink.getAttribute('href');
        const targetElement = document.querySelector(targetId);

        if (targetElement) {
          // Start smooth scroll immediately
          targetElement.scrollIntoView({
            behavior: 'smooth',
          });
        }

        // Disable pointer events during animation
        mobileNav.style.pointerEvents = 'none';

        const linkVisualDuration = 200; // Matches duration-200 on links
        const staggerDelay = 100; // Updated: 100ms between each link animation start
        const drawerVisualDuration = 800; // Updated: Matches duration-[800ms] on mobileNav

        // 1. Trigger sequential link slide out (bottom-up) - Animations will overlap
        const reversedLinks = [...orderedLinks].reverse();
        reversedLinks.forEach((navLink, index) => {
          const animationStartTime = index * staggerDelay; // Tightly staggered start time
          setTimeout(() => {
            navLink.classList.add('-translate-x-[300px]'); // Slide left 300px
          }, animationStartTime);
        });

        // Calculate when the last link (About) animation *starts*
        const lastLinkIndex = reversedLinks.length - 1;
        const lastLinkStartTime = lastLinkIndex * staggerDelay;

        // 2. Trigger drawer slide out shortly *after* last link animation *starts*
        const drawerAnimationStartTime = lastLinkStartTime + 100; // Start drawer 100ms after last link STARTS
        setTimeout(() => {
          mobileNav.classList.add('-translate-x-[500px]'); // Drawer slides left 500px
        }, drawerAnimationStartTime);

        // 3. Final cleanup after drawer animation should be complete
        const drawerAnimationEndTime =
          drawerAnimationStartTime + drawerVisualDuration;
        const totalDuration = drawerAnimationEndTime + 100; // Add buffer
        setTimeout(() => {
          mobileNav.classList.add('hidden');
          menuToggle.setAttribute('aria-expanded', 'false');

          // Reset styles for next opening
          orderedLinks.forEach((navLink) => {
            navLink.classList.remove('-translate-x-[300px]'); // Reset user's 300px value
          });
          mobileNav.classList.remove('-translate-x-[500px]'); // Reset drawer slide value

          // Remove focus trap when closing via link click
          document.removeEventListener('keydown', handleTabKeyInMobileNav);

          // Add inert attribute when closing via navigation
          mobileNav.setAttribute('inert', '');
          mobileNav.setAttribute('tabindex', '-1');

          // Re-enable pointer events
          mobileNav.style.pointerEvents = 'auto';
        }, totalDuration);
      });
    });
  }

  // Handle Escape key to close the mobile menu
  document.addEventListener('keydown', (e) => {
    if (
      e.key === 'Escape' &&
      mobileNav &&
      !mobileNav.classList.contains('hidden')
    ) {
      mobileNav.classList.add('hidden');
      menuToggle.setAttribute('aria-expanded', 'false');

      // Reset styles if closed via Escape
      mobileNavLinks.forEach((link) => {
        link.classList.remove('-translate-x-[300px]'); // Reset user's 300px value
      });
      mobileNav.classList.remove('-translate-x-[500px]'); // Reset drawer slide value

      // Remove focus trap
      document.removeEventListener('keydown', handleTabKeyInMobileNav);

      // Add inert attribute when closing
      mobileNav.setAttribute('inert', '');
      mobileNav.setAttribute('tabindex', '-1');

      // Return focus to the menu toggle button
      if (previouslyFocusedElement) {
        previouslyFocusedElement.focus();
      } else {
        menuToggle.focus();
      }
    }
  });

  // Desktop contact dropdown
  if (contactDropdownToggle && contactDropdown) {
    contactDropdownToggle.addEventListener('click', (e) => {
      e.stopPropagation();
      const expanded =
        contactDropdownToggle.getAttribute('aria-expanded') === 'true';
      contactDropdownToggle.setAttribute('aria-expanded', !expanded);
      contactDropdown.classList.toggle('hidden');

      // If opening the dropdown, set focus to the first link
      if (!expanded) {
        setTimeout(() => {
          const firstLink = contactDropdown.querySelector('a');
          if (firstLink) {
            firstLink.focus();
          }
        }, 100);
      }
    });

    // Handle keyboard events for the dropdown
    contactDropdown.addEventListener('keydown', (e) => {
      const focusableElements =
        contactDropdown.querySelectorAll('a[role="menuitem"]');
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      // Handle Tab and Shift+Tab to trap focus
      if (e.key === 'Tab') {
        if (e.shiftKey && document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        } else if (!e.shiftKey && document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }

      // Close on Escape
      if (e.key === 'Escape') {
        contactDropdown.classList.add('hidden');
        contactDropdownToggle.setAttribute('aria-expanded', 'false');
        contactDropdownToggle.focus();
      }
    });

    document.addEventListener('click', (e) => {
      if (
        !contactDropdown.contains(e.target) &&
        !contactDropdownToggle.contains(e.target)
      ) {
        contactDropdown.classList.add('hidden');
        contactDropdownToggle.setAttribute('aria-expanded', 'false');
      }
    });
  }

  // Active link highlighting
  const sections = document.querySelectorAll('section[id]');
  const navLinks = document.querySelectorAll('.nav-link');

  function highlightActiveLink() {
    const scrollY = window.scrollY;

    sections.forEach((section) => {
      const sectionHeight = section.offsetHeight;
      const sectionTop = section.offsetTop - 100;
      const sectionId = section.getAttribute('id');

      if (scrollY > sectionTop && scrollY <= sectionTop + sectionHeight) {
        navLinks.forEach((link) => {
          link.classList.remove('active-link');
          if (link.getAttribute('href') === `#${sectionId}`) {
            link.classList.add('active-link');
          }
        });
      }
    });
  }

  window.addEventListener('load', highlightActiveLink);
  window.addEventListener('scroll', highlightActiveLink);
</script>
