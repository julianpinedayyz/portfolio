---
import { services, keyValues } from '../../data/services.ts';
---

<section id="services" class="py-24 bg-gray-300">
  <div class="site-container">
    <div class="lg:flex lg:flex-wrap">
      <!-- Title container with fixed width -->
      <div class="w-full lg:w-[490px] mb-12 lg:mb-0">
        <h2 class="h2-heading text-gray-800">Services</h2>
      </div>

      <!-- Instructions for screen readers -->
      <div class="sr-only">
        The following is a list of services I offer. Select any item to expand
        and read more details.
      </div>

      <!-- Services list container -->
      <div class="w-full lg:flex-1 -mt-2">
        <div class="space-y-1">
          {
            services.map((service, index) => {
              // Generate unique IDs
              const titleId = `service-title-${index}`;
              const headerId = `service-toggle-${index}`;
              const panelId = `service-content-${index}`;

              return (
                <div class="border-b border-gray-400">
                  <button
                    class="service-toggle w-full py-5 flex justify-between items-center text-left focus:outline-none focus-visible:ring-2 focus-visible:ring-black rounded-none"
                    data-index={index}
                    role="button"
                    aria-expanded={index === 0 ? 'true' : 'false'}
                    aria-controls={panelId}
                    id={headerId}
                    aria-labelledby={titleId}
                  >
                    <span
                      id={titleId}
                      class="text-lg font-bold tracking-tight text-gray-800"
                    >
                      {service.title}
                    </span>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      class="plus-icon transition-transform text-brand-red {index === 0 ? 'rotate-45' : ''}"
                      aria-hidden="true"
                    >
                      <line x1="12" y1="5" x2="12" y2="19" />
                      <line x1="5" y1="12" x2="19" y2="12" />
                    </svg>
                  </button>
                  <div
                    class={`service-content py-2 pb-6 text-gray-800 ${index !== 0 ? 'hidden' : ''}`}
                    id={panelId}
                    role="region"
                    aria-labelledby={headerId}
                  >
                    <p>{service.description}</p>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Live region for screen reader announcements -->
  <div id="services-live-region" class="sr-only" aria-live="polite"></div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const serviceToggles = document.querySelectorAll('.service-toggle');
    // Get the header element to calculate its height
    const header = document.querySelector('header');
    const liveRegion = document.getElementById('services-live-region');

    // Calculate offset (header height plus some padding)
    const getHeaderOffset = () => {
      const headerHeight = header ? header.offsetHeight : 0;
      return headerHeight + 16; // Add some extra padding
    };

    // Function to scroll element into view with header offset
    const scrollWithOffset = (element) => {
      const headerOffset = getHeaderOffset();
      const elementPosition = element.getBoundingClientRect().top;
      const offsetPosition =
        elementPosition + window.pageYOffset - headerOffset;

      window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth',
      });
    };

    // Toggle service details with improved accessibility
    serviceToggles.forEach((toggle) => {
      toggle.addEventListener('click', () => {
        const content = toggle.nextElementSibling;
        const icon = toggle.querySelector('.plus-icon');
        const isExpanded = toggle.getAttribute('aria-expanded') === 'true';

        // Check if elements exist before proceeding
        if (!content || !icon) {
          console.error('Service toggle content or icon missing', toggle);
          return;
        }

        // Update ARIA attributes based on new state
        toggle.setAttribute('aria-expanded', !isExpanded);

        // Toggle content visibility
        if (isExpanded) {
          // Collapsing this item
          content.classList.add('hidden');
          icon.classList.remove('rotate-45');

          // Announce to screen readers
          if (liveRegion) {
            liveRegion.textContent = 'Collapsed'; // Simplified announcement
            setTimeout(() => {
              liveRegion.textContent = '';
            }, 500); // Shortened timeout
          }
        } else {
          // Expanding this item - close others first
          serviceToggles.forEach((otherToggle) => {
            if (otherToggle !== toggle) {
              const otherContent = otherToggle.nextElementSibling;
              const otherIcon = otherToggle.querySelector('.plus-icon');

              // Check if other elements exist
              if (otherContent && otherIcon) {
                otherToggle.setAttribute('aria-expanded', 'false');
                otherContent.classList.add('hidden');
                otherIcon.classList.remove('rotate-45');
              }
            }
          });

          // Then open this one
          content.classList.remove('hidden');
          icon.classList.add('rotate-45');

          // Announce to screen readers
          if (liveRegion) {
            liveRegion.textContent = 'Expanded'; // Simplified announcement
            setTimeout(() => {
              liveRegion.textContent = '';
            }, 500); // Shortened timeout
          }

          // Scroll the expanded service into view with header offset
          setTimeout(() => {
            scrollWithOffset(toggle);
          }, 10);
        }

        // No programmatic focus needed
      });

      // Add keyboard support for toggles
      toggle.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          e.stopPropagation();
          toggle.click();
        }
      });
    });

    // Remove the explicit opening of the first item via JS
    // The HTML now handles the default expanded state
    /*
    if (serviceToggles.length > 0) {
      const firstToggle = serviceToggles[0];
      const firstContent = firstToggle.nextElementSibling;
      const firstIcon = firstToggle.querySelector('.plus-icon');

      if (firstToggle && firstContent && firstIcon) {
        firstToggle.setAttribute('aria-expanded', 'true');
        firstContent.classList.remove('hidden');
        firstIcon.classList.add('rotate-45');
      }
    }
    */
  });
</script>
