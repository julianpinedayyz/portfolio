---
import ProfileButtons from '../ui/ProfileButtons.astro';
import { Image } from 'astro:assets';
import {
  experiences,
  linkedInUrl,
  resumeFilePath,
} from '../../data/experienceData';
---

<section id="experience" class="bg-[#1A1A1A] py-10 text-white">
  <div class="max-w-[1480px] mx-auto px-6 my-[40px]">
    <!-- Title container with fixed width -->
    <div class="w-full lg:w-[400px] mb-12 lg:mb-0">
      <h2 class="h2-heading text-[#DCDCDC]">Experience</h2>
    </div>

    <!-- Instructions for screen readers -->
    <div class="sr-only">
      The following is a list of my work experience, with details that can be
      expanded by activating each item.
    </div>

    <ul class="item-list">
      {
        experiences.map((job, index) => {
          // Generate unique IDs for labelling within the map function's scope
          const roleId = `role-${index}`;
          const companyId = `company-${index}`;
          const dateDescId = `date-desc-${index}`; // ID for the descriptive date span
          const headerId = `accordion-header-${index}`;
          const panelId = `panel-${index}`;

          // Determine the descriptive date text
          const dateDescription =
            job.year === '05/25'
              ? 'from 2005 to 2025'
              : job.year === '21/22'
                ? 'from 2021 to 2022'
                : job.year === '18/19'
                  ? 'from 2018 to 2019'
                  : job.year === '16/18'
                    ? 'from 2016 to 2018'
                    : job.year; // Fallback if needed

          // Determine the aria-label for the role if it's Lab 829
          const roleAriaLabel =
            job.role === 'Lab 829' ? 'Lab eight two nine' : null;

          return (
            <li
              class="list-item"
              aria-expanded={index === 0 ? 'true' : 'false'}
            >
              <div class="item-expander" />
              <div
                class="item-main"
                role="button"
                tabindex="0"
                aria-controls={panelId}
                id={headerId}
                aria-expanded={index === 0 ? 'true' : 'false'}
                aria-labelledby={`${dateDescId} ${roleId} ${companyId}`}
              >
                <div class="item-year font-extralight italic text-4xl tracking-[-0.08em]">
                  {job.year}
                </div>
                <span id={dateDescId} class="sr-only">
                  {dateDescription}
                </span>

                <div
                  id={roleId}
                  class="item-model font-semibold text-4xl tracking-[-0.08em]"
                  aria-label={roleAriaLabel}
                >
                  {job.role}
                </div>

                <div id={companyId} class="item-country font-medium">
                  {job.company}
                </div>
              </div>

              <div
                class="item-expanded"
                id={panelId}
                role="region"
                aria-labelledby={headerId}
              >
                <div class="item-expanded-content">
                  <div class="left-column">
                    <div class="item-image">
                      <Image
                        src={job.imageUrl}
                        alt={`${job.role} at ${job.company} logo`}
                        width={350}
                        height={230}
                        format="webp"
                        quality={80}
                        loading={index === 0 ? 'eager' : 'lazy'}
                        fetchpriority={index === 0 ? 'high' : 'auto'}
                        decoding="async"
                      />
                    </div>
                    <div class="impact-section">
                      <h4>Impact:</h4>
                      <ul>
                        {job.impact.map((impact) => (
                          <li>{impact}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                  <div class="expanded-details">
                    <div class="expanded-header">
                      <h3>{job.position}</h3>
                      <p>{job.subtitle}</p>
                      <div class="header-divider" />
                    </div>
                    <div class="expanded-content">
                      <div class="description-column">
                        <p>{job.intro}</p>
                        <ul>
                          {job.description.map((item) => (
                            <li>{item}</li>
                          ))}
                        </ul>
                      </div>
                      <div class="description-column">
                        <div class="description-column-inner">
                          <h4>Key Skills:</h4>
                          <ul>
                            {job.skills.map((skill) => (
                              <li>{skill}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          );
        })
      }
    </ul>

    <!-- Experience Footer -->
    <ProfileButtons linkedInUrl={linkedInUrl} resumeUrl={resumeFilePath} />
  </div>

  <!-- Live region for screen reader announcements -->
  <div id="accordion-live-region" class="sr-only" aria-live="polite"></div>
</section>

<style>
  /* Color Variables */
  :root {
    --color-background: #1a1a1a;
    --color-text-primary: #ffffff;
    --color-text-secondary: #4b5563; /* Changed from #a0a0a0 to #4b5563 (gray-700) for better contrast */
    --color-divider: #333333;
    --color-expanded-bg: #f1efe5;
    --color-expanded-text: #333333;
    --spacing-xs: 4px;
    --spacing-sm: 8px;
    --spacing-md: 16px;
    --spacing-lg: 24px;
    --spacing-xl: 32px;
    --transition-speed: 0.3s;
  }

  /* Item List */
  .item-list {
    list-style: none;
    width: 100%;
    padding: 0;
    margin-left: 0;
    margin-bottom: 80px;
  }

  /* List Item */
  .list-item {
    position: relative;
    width: 100%;
    overflow: visible;
    transition: background-color var(--transition-speed);
  }

  .list-item[aria-expanded='true'] {
    width: 100%;
  }

  .list-item:hover .item-main {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .list-item:focus {
    outline: none;
  }
  .item-expander {
    width: 350px;
    height: 89px;
    display: flex;
    float: left;
    background-color: #1a1a1a;
  }
  .item-expander:focus {
    outline: none;
  }
  /* Item Main */
  .item-main {
    display: flex;
    align-items: center;
    padding: var(--spacing-lg) var(--spacing-md);
    transition: background-color var(--transition-speed);
    width: calc(100% - 350px);
    border-bottom: 1px solid var(--color-divider);
    cursor: pointer;
    position: relative;
  }

  /* Expand/collapse indicator */
  .item-main::after {
    content: '+';
    position: absolute;
    right: 24px;
    font-size: 24px;
    font-weight: 300;
    color: var(--color-text-primary);
    transition: transform var(--transition-speed);
  }

  .list-item[aria-expanded='true'] .item-main::after {
    content: '−';
  }

  /* Focus styling for accessibility */
  .item-main:focus {
    outline: 2px solid white;
    outline-offset: -2px;
  }

  .item-year {
    width: 15%;
    margin-left: 5px;
    color: var(--color-text-primary);
  }

  .item-model {
    width: 45%;
    /* line-height: 1.2; */
    padding-left: var(--spacing-lg);
    color: var(--color-text-primary);
  }

  .item-country {
    width: 40%;
    text-align: left;
    padding-left: var(--spacing-lg);
    color: var(--color-text-primary);
  }

  /* Expanded Item */
  .item-expanded {
    position: absolute;
    left: 0;
    width: 100%;
    display: flex;
    background-color: var(--color-expanded-bg);
    border-radius: 0;
    overflow: hidden;
    max-height: 0;
    opacity: 0;
    transition: all var(--transition-speed);
    z-index: 10;
  }

  .list-item[aria-expanded='true'] .item-expanded {
    position: relative;
    max-height: none;
    opacity: 1;
    transform: translateY(0);
  }

  .item-expanded-content {
    display: flex;
    width: 100%;
    padding: 0;
    min-height: 230px;
  }

  .left-column {
    width: 350px;
    display: flex;
    flex-direction: column;
  }

  .item-image {
    height: 230px;
    max-width: 350px;
    width: 100%;
  }

  .item-image img {
    width: 100%;
  }

  .impact-section {
    background-color: #333333;
    color: #ffffff;
    padding: var(--spacing-md);
    width: 350px;
    min-height: 100px;
  }

  .impact-section h4 {
    color: #ffffff;
    font-size: 1.1rem;
    margin-bottom: var(--spacing-sm);
    font-weight: 500;
  }

  .impact-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .impact-section ul li {
    margin-bottom: var(--spacing-sm);
    position: relative;
    padding-left: 20px;
  }

  .impact-section ul li::before {
    content: '•';
    position: absolute;
    left: 0;
    color: #ffffff;
  }

  .expanded-details {
    padding: var(--spacing-lg);
    float: left; /* Added float property */
    width: 100%;
  }

  .expanded-header {
    margin-bottom: var(--spacing-md);
  }

  .expanded-header h3 {
    font-size: 1.4rem;
    font-weight: 500;
    margin-bottom: var(--spacing-sm);
    color: var(--color-expanded-text);
  }

  .expanded-header p {
    color: var(--color-text-secondary);
    font-size: 0.9rem;
    margin-top: var(--spacing-xs);
  }

  .header-divider {
    height: 1px;
    background-color: #cccccc;
    margin: var(--spacing-md) 0;
    width: 100%;
  }

  .expanded-content {
    display: flex;
    color: var(--color-expanded-text);
  }

  .description-column {
    padding-right: var(--spacing-md);
  }

  .description-column:nth-child(1) {
    width: 60%;
    flex: 0 0 70%;
  }

  .description-column:nth-child(2) {
    width: 40%;
    flex: 0 0 30%;
    display: flex;
    flex-wrap: wrap;
  }

  .description-column-inner {
    width: 100%;
    padding-right: var(--spacing-md);
    float: inline-start;
  }

  /* Additional styles to maintain side-by-side layout */
  .description-column p {
    font-size: 0.95rem;
    line-height: 1.6;
    margin-bottom: var(--spacing-md);
  }

  .expanded-details ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .expanded-details ul li {
    margin-bottom: var(--spacing-sm);
    position: relative;
    padding-left: 20px;
  }

  .expanded-details ul li::before {
    content: '•';
    position: absolute;
    left: 0;
    color: var(--color-text-secondary);
  }

  .expanded-details h4 {
    color: var(--color-expanded-text);
    font-size: 1.1rem;
    margin-bottom: var(--spacing-sm);
    font-weight: 500;
  }

  /* Responsive Adjustments */
  @media (max-width: 1280px) {
    .item-year {
      width: 15%;
    }

    .item-model {
      width: 40%;
      font-size: 1.5rem;
    }

    .item-country {
      width: 45%;
    }
  }

  @media (max-width: 992px) {
    .item-expander {
      display: none;
    }
    .item-main {
      margin-left: 0px;
      width: 100%;
    }

    .item-model {
      width: 50%;
      font-size: 1.4rem;
      padding-left: var(--spacing-md);
    }

    .item-country {
      width: 35%;
      padding-left: var(--spacing-md);
    }

    .left-column {
      width: 100%;
    }

    .item-image {
      display: none;
    }

    .impact-section {
      width: 100%;
    }

    .expanded-details {
      width: 100%;
    }

    .item-expanded-content {
      flex-direction: column;
    }

    .description-column,
    .description-column:nth-child(1),
    .description-column:nth-child(2) {
      width: 100%;
      flex: 0 0 100%;
      padding-right: 0;
      margin-bottom: 1rem;
    }
  }

  @media (max-width: 768px) {
    /* Add margin to h2 on mobile */
    :global(.h2-heading) {
      margin-bottom: 1.5rem;
    }
    .item-main {
      flex-wrap: wrap;
      margin-left: 0;
      width: 100%;
      padding: var(--spacing-md);
    }

    .item-year {
      width: auto;
      margin-right: var(--spacing-md);
      text-align: left;
    }

    .item-model {
      width: 100%;
      order: -1;
      margin-bottom: var(--spacing-sm);
      font-size: 1.3rem;
      padding-left: 0;
    }

    .item-country {
      width: auto;
      padding-left: 0;
    }

    .list-item[aria-expanded='true'] .item-expanded {
      max-height: none;
    }

    .item-expanded-content {
      min-height: auto;
    }
  }

  @media (max-width: 576px) {
    .item-expanded {
      flex-direction: column;
    }

    .left-column,
    .item-image,
    .expanded-details,
    .impact-section {
      width: 100%;
    }

    .item-main {
      padding: var(--spacing-sm);
    }

    .item-year,
    .item-country {
      font-size: 0.9rem;
    }

    .item-model {
      font-size: 1.2rem;
    }

    .description-column-inner {
      width: 100%;
      float: none;
      margin-bottom: var(--spacing-md);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const listItems = document.querySelectorAll('.list-item');
    const itemMains = document.querySelectorAll('.item-main');
    // Get the header element to calculate its height
    const header = document.querySelector('header');
    // Calculate offset (header height plus some padding)
    const getHeaderOffset = () => {
      const headerHeight = header ? header.offsetHeight : 0;
      return headerHeight + 16; // Add some extra padding
    };

    // Function to scroll element into view with header offset
    const scrollWithOffset = (element) => {
      const headerOffset = getHeaderOffset();
      const elementPosition = element.getBoundingClientRect().top;
      const offsetPosition =
        elementPosition + window.pageYOffset - headerOffset;

      window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth',
      });
    };

    // Function to collapse all items except the one we want to keep expanded
    const collapseOtherItems = (currentItem) => {
      listItems.forEach((item) => {
        if (item !== currentItem) {
          item.setAttribute('aria-expanded', 'false');
          const header = item.querySelector('.item-main');
          if (header) {
            header.setAttribute('aria-expanded', 'false');
          }
        }
      });
    };

    // Clean up duplicative messages for screen readers
    document.querySelectorAll('.duplicate-message').forEach((el) => {
      el.setAttribute('aria-hidden', 'true');
    });

    // Function to toggle accordion state
    const toggleAccordion = (accordionHeader, viaKeyboard = false) => {
      const parentItem = accordionHeader.closest('.list-item');
      const isExpanded = parentItem.getAttribute('aria-expanded') === 'true';
      const panelId = accordionHeader.getAttribute('aria-controls');
      const panel = document.getElementById(panelId);
      const liveRegion = document.getElementById('accordion-live-region');

      // Toggle expanded state
      if (isExpanded) {
        parentItem.setAttribute('aria-expanded', 'false');
        accordionHeader.setAttribute('aria-expanded', 'false');

        // Announce state change to screen readers
        if (liveRegion) {
          liveRegion.textContent = 'Collapsed';
          setTimeout(() => {
            liveRegion.textContent = '';
          }, 500);
        }
      } else {
        // Collapse all other items first
        collapseOtherItems(parentItem);

        // Expand this item
        parentItem.setAttribute('aria-expanded', 'true');
        accordionHeader.setAttribute('aria-expanded', 'true');

        // Announce state change to screen readers
        if (liveRegion) {
          liveRegion.textContent = 'Expanded';
          setTimeout(() => {
            liveRegion.textContent = '';
          }, 500);
        }

        // Scroll the expanded item into view, accounting for header height
        setTimeout(() => {
          scrollWithOffset(accordionHeader);
        }, 10);
      }

      // No programmatic focus needed
    };

    // Add click handlers to item-main elements
    itemMains.forEach((itemMain) => {
      itemMain.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent event from bubbling to parent
        toggleAccordion(itemMain, false);
      });
    });

    // Add keyboard support for accordion headers
    itemMains.forEach((itemMain) => {
      itemMain.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          e.stopPropagation();
          toggleAccordion(itemMain, true);
        }
      });
    });
  });
</script>
